--- !ruby/object:RI::MethodDescription 
aliases: 
- !ruby/object:RI::AliasName 
  name: breakpoint
block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Enters the debugger in the current thread after <em>steps</em> line events occur. Before entering the debugger, a user-defined startup script is may be read.
- !ruby/struct:SM::Flow::P 
  body: Setting <em>steps</em> to 0 will cause a break in the debugger subroutine and not wait for a line event to occur. You will have to go &quot;up 1&quot; in order to be back in your debugged program rather than the debugger. Settings <em>steps</em> to 0 could be useful you want to stop right after the last statement in some scope, because the next step will take you out of some scope.
- !ruby/struct:SM::Flow::P 
  body: If block <em>block</em> is given (and the debugger hasn't been started, we run the block under the debugger.
- !ruby/struct:SM::Flow::P 
  body: "FIXME: Alas, when a block is given, we can't support running the startup script or support the steps option."
full_name: Kernel#debugger
is_singleton: false
name: debugger
params: (steps = 1, &block)
visibility: public
